{
   "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
   "name": "pine",
   "patterns": [
      {"include": "#script"},
      {
         "match": "\\b(indicator|library|strategy)\\b(?=\\()",
         "name": "entity.name.tag.pine"
      },
      {"include": "#annotations"},
      {"include": "#comments"},
      {
         "comment": "export? type name regex",
         "match": "(?<=(export)\\s+|^)(type|enum)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b",
         "captures": {
            "1": {"name": "keyword.control.flow.pine"},
            "2": {"name": "keyword.operator..pine"},
            "3": {"name": "storage.type.pine"}
         }
      },
      {
         "comment": "math functions",
         "match": "\\b(math)(\\s*\\.\\s*)(pi|phi|rphi|e|pow|min|max|abs|log|log10|sqrt|sign|exp|sin|cos|tan|asin|acos|atan|ceil|floor|round|round_to_mintick|todegrees|toradians|random|sum|avg)(?=\\s*\\()",
         "captures": {
            "1": {"name": "support.constant.namespace.pine"},
            "2": {"name": "punctuation.pine"},
            "3": {"name": "entity.name.function.pine"}
         }
      },
      {
         "comment": "array functions (blocks ta and math due to conflicts with conflitcs with functions like min, max, sum, avg, etc.)",
         "match": "\\b(array)(\\s*\\.\\s*)(?!ta\\.|math\\.|matrix\\.)(new_float|new_int|new_color|new_bool|new_string|new_line|new_box|new_table|new_label|new_linefill|copy|slice|size|get|min|max|push|range|sum|set|from|fill|insert|join|remove|pop|clear|sort|sort_indices|percentrank|percentile_nearest_rank|percentile_linear_interpolation|abs|binary_search|binary_search_leftmost|binary_search_rightmost|concat|avg|stdev|variance|covariance|mode|median|standardize|indexof|lastindexof|includes|shift|unshift|reverse|first|last|every|some)\\b(?=\\s*\\()",
         "captures": {
            "1": {"name": "support.type.pine"},
            "2": {"name": "punctuation.pine"},
            "3": {"name": "entity.name.function.pine"}
         }
      },
      {
         "comment": "matrix  functions",
         "match": "\\b(?!ta|math|array)(matrix)(\\s*\\.\\s*)(row|col|reshape|get|set|add_row|add_col|remove_row|remove_col|fill|submatrix|copy|columns|rows|elements_count|concat|swap_rows|swap_columns|reverse|sort|det|min|max|avg|median|mode|transpose|sum|diff|mult|pinv|inv|rank|trace|eigenvalues|eigenvectors|kron|pow|is_zero|is_identity|is_binary|is_symmetric|is_antisymmetric|is_diagonal|is_antidiagonal|is_triangular|is_stochastic|is_square)\\s*(?=\\s*\\()",
         "captures": {
            "1": {"name": "support.type.pine"},
            "2": {"name": "punctuation.pine"},
            "3": {"name": "entity.name.function.pine"}
         }
      },
      {
         "comment": "map functions",
         "match": "\\b(map)(\\s*\\.\\s*)(copy|size|get|contains|keys|values|put|put_all|remove|clear)\\s*(?=\\s*\\()",
         "captures": {
            "1": {"name": "support.type.pine"},
            "2": {"name": "punctuation.pine"},
            "3": {"name": "entity.name.function.pine"}
         }
      },
      {
         "comment": "highlights import, export, method, varip, var",
         "match": "\\b(import|export|method|var(?:ip)?)\\b(?=\\s\\w)",
         "name": "keyword.control.flow.pine"
      },
      {
         "comment": "blocks built in namespaces, for highlighting built-in methods",
         "match": "(?!ta|str|matrix|array|box|line|map|polyline|table|label|linefill|chart(?:\\s*\\.\\s*)point|polyline|math)\\.(sort_indices|percentrank|percentile_nearest_rank|percentile_linear_interpolation|abs|binary_search|binary_search_leftmost|binary_search_rightmost|concat|avg|stdev|variance|covariance|mode|median|standardize|indexof|lastindexof|includes|shift|unshift|reverse|first|last|every|some|row|col|reshape|add_row|add_col|remove_row|remove_col|submatrix|columns|rows|elements_count|swap_rows|swap_columns|det|transpose|diff|mult|pinv|inv|rank|trace|eigenvalues|eigenvectors|kron|pow|is_zero|is_identity|is_binary|is_symmetric|is_antisymmetric|is_diagonal|is_antidiagonal|is_triangular|is_stochastic|is_square|contains|keys|values|put_all|put|set_text|set_top_left_point|set_bottom_right_point|set_text_color|set_text_font_family|set_text_halign|set_text_size|set_text_valign|set_text_wrap|delete|get_bottom|get_left|get_right|get_top|set_bgcolor|set_border_color|set_border_style|set_border_width|set_bottom|set_extend|set_left|set_lefttop|set_right|set_rightbottom|set_top|set_point|get_text|get_x|get_y|set_color|set_size|set_style|set_textalign|set_textcolor|set_tooltip|set_x|set_xloc|set_xy|set_y|set_yloc|set_first_point|set_second_point|get_price|get_x1|get_x2|get_y1|get_y2|set_width|set_x1|set_x2|set_xy1|set_xy2|set_y1|set_y2|set|cell_set_tooltip|merge_cells|cell|cell_set_bgcolor|cell_set_text_font_family|cell_set_height|cell_set_text|cell_set_text_color|cell_set_text_halign|cell_set_text_size|cell_set_text_valign|cell_set_text_width|set_frame_color|set_frame_width|set_position|all|get_line1|get_line2|copy|slice|size|get|min|max|push|range|sum|from|set|fill|insert|join|remove|pop|clear|sort)\\b(?=\\s*\\()",
         "captures": {"1": {"name": "support.function.builtin.pine"}}
      },
      {
         "comment": "Not-a-Number value",
         "match": "\\bna\\b(?!\\s*\\()",
         "name": "constant.variable.pine"
      },
      {
         "comment": "Return type arrow",
         "match": "\\)\\s*(→\\s+(?:\\[[^\\]]+\\]|[a-zA-Z_.<>]+(?:\\.[a-zA-Z_]+)?))",
         "captures": {
            "1": {"name": "keyword.operator.return.pine"},
            "2": {"name": "entity.name.type.return.pine"}
         }
      },
      {
         "comment": "highlights [....] in the hover over following ) → [..,...,..]",
         "match": "\\)\\s+(→\\s+(?:\\[(?:[^,\\]]+,\\s*)+[\\w_]+\\]|(?:\\w+\\.\\w+)|(?:(?!void|na)[\\w.><\\[\\]]+)))$",
         "captures": {"1": {"name": "keyword.type.pine"}}
      },
      {"include": "#type-declaration"},
      {"include": "#keywords"},
      {"include": "#colors"},
      {"include": "#operators"},
      {"include": "#constants"},
      {"include": "#variables"},
      {"include": "#functions"},
      {"include": "#strings"},
      {"include": "#numbers"}
   ],
   "repository": {
      "script": {
         "patterns": [
            {
               "comment": "TradingView script URL",
               "match": "^(//\\s*)(ⓘ)(https://www.tradingview.com)([-\\w.,@?^=%&:/~+#{}]*)([a-zA-Z_][A-z0-9_]*)",
               "captures": {
                  "1": {"name": "comment.line.double-slash.pine"},
                  "2": {"name": "comment.line.double-slash.pine"},
                  "3": {"name": "support.url.pine"},
                  "4": {"name": "support.url.path.pine"},
                  "5": {"name": "support.url.query.pine"}
               }
            },
            {
               "comment": "Import statement",
               "match": "(import\\s+)(?:([a-zA-Z_][A-z0-9_]*)\\/)(?:\\s+as\\s+([a-zA-Z_][A-z0-9_]*))?",
               "captures": {
                  "1": {"name": "keyword.control.flow.pine"},
                  "2": {"name": "support.type.property-name.pine"},
                  "4": {"name": "storage.modifier.import.pine"}
               }
            },
            {
               "match": "^(\/\/)(@)(version)(=)(\\d+)",
               "captures": {
                  "1": {"name": "comment.line.double-slash.pine"},
                  "2": {"name": "entity.name.tag.pine"},
                  "3": {"name": "entity.name.label.pine"},
                  "4": {"name": "keyword.operator.assignment.pine"},
                  "5": {"name": "constant.numeric.pine"}
               }
            },
            {
               "match": "^(\/\/\\s*)(ⓘ)(https:\/\/www\\.tradingview\\.com)([-\\w.,@?^=%&:\/~+#{}]*)([a-zA-Z_][A-z0-9_]*)(?=.*?\\n)",
               "captures": {
                  "1": {"name": "comment.line.double-slash.pine"},
                  "2": {"name": "comment.line.double-slash.pine"},
                  "3": {"name": "constant.numeric.pine"},
                  "4": {"name": "support.pine.pine"},
                  "5": {"name": "support.pine.pine"},
                  "6": {"name": "support.pine.pine"}
               }
            }
         ]
      },
      "annotations": {
         "patterns": [
            {
               "comment": "Annotations with descriptions or markdown",
               "begin": "^(\/\/)\\s*(@)(type|description|function|returns|enum|variable|field|param|strategy_alert_message|version)(\\s+([a-zA-Z_][A-z0-9_]*))?(?=[^\n]*)",
               "beginCaptures": {
                  "1": {"name": "comment.line.double-slash.pine"},
                  "2": {"name": "punctuation.definition.changed.pine"},
                  "3": {"name": "punctuation.definition.inserted.pine"},
                  "5": {"name": "entity.other.attribute-name.pine"}
               },
               "patterns": [
                  {"include": "#type-declaration"},
                  {
                     "match": "\\(\\s*(?:(?:array|matrix|map)<[^>]+>|(([a-zA-Z_][A-z0-9_]*\\.)?[a-zA-Z_][A-z0-9_]*))\\s*\\)",
                     "name": "storage.type.pine"
                  },
                  {"include": "#markup"},
                  {"include": "#keywords"},
                  {"include": "#colors"},
                  {"include": "#operators"},
                  {"include": "#constants"},
                  {"include": "#strings"},
                  {"include": "#variables"},
                  {"include": "#functions"},
                  {"include": "#strings"},
                  {"include": "#numbers"}
               ],
               "end": "(?=^//\\s*@|^(?!\\s*//))"
            }
         ]
      },
      "comments": {
         "patterns": [
            {
               "comment": "Single-line comments",
               "match": "//[^\\n]*$",
               "name": "comment.line.double-slash.pine"
            }
         ]
      },
      "markup": {
         "patterns": [
            {
               "begin": "(?=^\\/\\/)",
               "patterns": [
                  {
                     "match": "^\\/\\/\\s*(#+)\\s+([^\\n]*)",
                     "captures": {
                        "1": {"name": "markup.heading | markup.heading entity.name.pine"},
                        "2": {"name": "markup.heading.pine"}
                     }
                  },
                  {
                     "match": "(?<=^\\/\\/\\s*|[^*])\\*\\*([^\\n*]+)\\*\\*(?=[^*]|$)",
                     "captures": {"1": {"name": "markup.bold.pine"}}
                  },
                  {
                     "match": "^\\/\\/\\s*(-)\\s+([^\\n]*)",
                     "captures": {
                        "1": {"name": "beginning.punctuation.definition.list.markdown.pine"},
                        "2": {"name": "punctuation.definition.comment.pine"}
                     }
                  },
                  {
                     "match": "^\\/\\/\\s*(\\d+\\.)\\s+([^\\n]*)",
                     "captures": {
                        "1": {"name": "beginning.punctuation.definition.list.markdown.pine"},
                        "2": {"name": "meta.paragraph.list.numbered.pine"}
                     }
                  },
                  {
                     "match": "^\\/\\/\\s*(>)\\s+([^\\n]*)",
                     "captures": {
                        "1": {"name": "meta.block-level.pine"},
                        "2": {"name": "meta.paragraph.blockquote.pine"}
                     }
                  },
                  {
                     "name": "markup.italic.pine",
                     "match": "(?<=^\\/\\/\\s*|[^\\*])\\*([^\\n*]+)\\*(?=[^\\*]|$)",
                     "captures": {"1": {"name": "emphasis.pine"}}
                  },
                  {
                     "name": "markup.link.pine",
                     "match": "\\[([^\\]]+)\\]\\(([^\\)]+)\\)",
                     "captures": {
                        "1": {"name": "string.other.link.title.pine"},
                        "2": {"name": "string.other.link.description.pine"}
                     }
                  },
                  {
                     "name": "markup.code.pine",
                     "match": "`([^`]+)`",
                     "captures": {"1": {"name": "entity.other.attribute-name.pine"}}
                  },
                  {
                     "begin": "^\\/\\/\\s*```(pine\\w*)?(?=\\n)",
                     "contentName": "markup.codeblock.pine",
                     "patterns": [
                        {"include": "#script"},
                        {"include": "#type-declaration"},
                        {"include": "#constants"},
                        {"include": "#keywords"},
                        {"include": "#operators"},
                        {"include": "#colors"},
                        {"include": "#functions"},
                        {"include": "#variables"},
                        {"include": "#strings"},
                        {"include": "#numbers"},
                        {"include": "$self"}
                     ],
                     "end": "(?=^\/\/\\s*```|^\\b|^\\/\\/\\s*@)"
                  },
                  {
                     "name": "markup.paragraph.pine",
                     "match": "[^\\s]+[\\w\\s\\.,;:'\"\\-!?()]+"
                  }
               ],
               "end": "^(?=(\\b|\\/\\/\\s*@))"
            }
         ]
      },
      "keywords": {
         "patterns": [
            {
               "match": "(?<=[\\w\\n]\\s+)(and|or)\\b(?=\\s)|(?<=\\w\\s|=|^)\\b(not)\\b(?=\\s)",
               "name": "keyword.operator.pine"
            },
            {
               "match": "\\b(and|or|not)\\b",
               "name": "keyword.operator.logical.pine"
            },
            {
               "comment": "hex colors",
               "match": "#([0-9a-fA-F]{6,8})\\b",
               "captures": {"0": {"name": "constant.numeric.pine"}}
            },
            {
               "match": "(?<=^|=)\\s*(if|switch|else\\s+if|while|for|else)\\b",
               "name": "keyword.control.flow.pine"
            },
            {
               "match": "\\s(in|to|by)\\s",
               "name": "keyword.control.pine"
            },
            {
               "comment": "Arggs",
               "begin": "(?<=\\(|,)\\n*(?=\\s*[a-zA-Z_][a-zA-Z_0-9]*\\s*=)",
               "end": "(?==)",
               "patterns": [
                  {
                     "begin": "(?<=\\(|,|\\n)(?=\\s*[a-zA-Z_][a-zA-Z_0-9]*\\s*=)",
                     "end": "(?=\\s*=)",
                     "patterns": [
                        {
                           "match": "\\b[a-zA-Z_][a-zA-Z_0-9]*\\b",
                           "name": "punctuation.accessor.pine"
                        }
                     ]
                  }
               ]
            },
            {
               "match": "(?<=for\\s+)\\s*(?:\\[\\s*([_A-z]\\w*)\\s*,\\s*([_A-z]\\w*)\\s*\\]|([_A-z]\\w*))(?=\\s+in)",
               "captures": {
                  "1": {"name": "entity.other.attribute-name.pine"},
                  "2": {"name": "entity.other.attribute-name.pine"},
                  "3": {"name": "entity.other.attribute-name.pine"}
               },
               "name": "keyword.control.pine"
            }
         ]
      },
      "type-declaration": {
         "patterns": [
            {
               "comment": "fields/param types",
               "match": "(?<=^|,|\\(|var|varip|simple|series|input|const)(?:\\s*)(?:(array|matrix|map)<(?:(?:([a-zA-Z_][A-z0-9_]*),)?(?:(?:([a-zA-Z_][A-z0-9_]*)\\.)?([a-zA-Z_][a-zA-Z_0-9]*))>)|(?:([a-zA-Z_][A-z0-9_]*)\\.)?([a-zA-Z_][a-zA-Z_0-9]*)(?:\\s*\\[\\](?=\\s))?)(?=\\s+[a-zA-Z_][A-z0-9_]*(?:(?:(?:\\t| )*(?:=\\s*(?:(?:'.*')|(?:\".*\")|(?:\\d*(?:\\.(?:\\d+[eE]?\\d+)?\\d*|\\d+))|(?:#[a-fA-F0-9]{6,8})|(?:(?:[a-zA-Z_][A-z0-9_]*\\.)*[a-zA-Z_][A-z0-9_]*))))?))",
               "captures": {
                  "1": {"name": "storage.type.pine"},
                  "2": {"name": "keyword.operator.new.pine"},
                  "3": {"name": "storage.type.pine"},
                  "4": {"name": "storage.type.pine"},
                  "5": {"name": "storage.type.pine"},
                  "6": {"name": "storage.type.pine"}
               }
            },
            {
               "comment": "Improved type highlighting within <...>",
               "match": "(?<=^|\\s|,|\\()\\s*\\b(matrix|map|array)(?:\\.(new))?<((?:([a-zA-Z_][A-z0-9_]*\\.)?[a-zA-Z_][A-z0-9_]*\\,)?(?:([a-zA-Z_][A-z0-9_]*\\.)?[a-zA-Z_][A-z0-9_]*))>(?=\\s*\\(|\\s|$)",
               "captures": {
                  "1": {"name": "storage.type.pine"},
                  "2": {"name": "keyword.operator.new.pine"},
                  "3": {"name": "storage.type.pine"},
                  "4": {"name": "storage.type.pine"},
                  "5": {"name": "storage.type.pine"}
               }
            },
            {
               "comment": "Improved type highlighting within <...>",
               "match": "(?<=^|\\s|,|\\()\\s*\\b(matrix|map|array)(?:\\.(new))?<((?:([a-zA-Z_][A-z0-9_]*\\.)?[a-zA-Z_][A-z0-9_]*\\,)?(?:([a-zA-Z_][A-z0-9_]*\\.)?[a-zA-Z_][A-z0-9_]*))>(?=\\s*\\(|\\s|$)",
               "captures": {
                  "1": {"name": "storage.type.pine"},
                  "2": {"name": "keyword.operator.new.pine"},
                  "3": {"name": "storage.type.pine"},
                  "4": {"name": "storage.type.pine"},
                  "5": {"name": "storage.type.pine"}
               }
            },
            {
               "comment": "Built-in type keywords",
               "match": "\\b(bool|color|float|int|string|line|label|box|table|linefill|chart\\.point|polyline)(?:\\[\\](?=\\s))?\\b(?=\\s*$|\\s+\\w|\\s*\/\/)|\\b([a-zA-Z_]\\w*\\.)?([a-zA-Z_]\\w*)(?=\\s*\\[\\](?=\\s))\\b(?=\\s*$|\\s+\\w|\\s*\/\/)",
               "captures": {
                  "0": {"name": "storage.type.pine"},
                  "1": {"name": "storage.type.pine"},
                  "2": {"name": "storage.type.pine"}
               }
            },
            {
               "comment": "Improved type highlighting within <...>",
               "match": "\\b(?:([a-zA-Z_][A-z0-9_]*\\.)?([a-zA-Z_][A-z0-9_]*))\\.(new)(?=\\s*\\()",
               "captures": {
                  "1": {"name": "storage.modifier.import.pine"},
                  "2": {"name": "keyword.operator.pine"},
                  "3": {"name": "keyword.operator.new.pine"}
               }
            }
         ]
      },
      "strings": {
         "patterns": [
            {
               "begin": "\"",
               "end": "\"",
               "name": "string.quoted.double.pine",
               "patterns": [
                  {
                     "match": "\\\\.",
                     "name": "constant.character.escape.pine"
                  },
                  {
                     "comment": "will leave text/numbers in curly braces inside of a string a different highlight than string",
                     "match": "(\\{)([^}]*)(\\})",
                     "captures": {
                        "1": {"name": "brackets.pine"},
                        "2": {"name": "constant.numeric.pine"},
                        "3": {"name": "brackets.pine"}
                     }
                  },
                  {
                     "match": "[^\"\\\\\\{\\}]+",
                     "name": "string.quoted.double.pine"
                  }
               ]
            },
            {
               "begin": "(?<!\\\\)'(?=[^\\n]*(?!=\\\\'|\\n)[^\\n]*')",
               "end": "(?=[^\\\\])'",
               "name": "string.quoted.double.pine",
               "patterns": [
                  {
                     "match": "[\\\\][^\\n](?=[^\\n]*')",
                     "name": "constant.character.escape.pine"
                  },
                  {
                     "comment": "will leave text/numbers in curly braces inside of a string a different highlight than string",
                     "match": "(\\{)([^}]*)(\\})",
                     "captures": {
                        "1": {"name": "brackets.pine"},
                        "2": {"name": "constant.numeric.pine"},
                        "3": {"name": "brackets.pine"}
                     }
                  },
                  {
                     "comment": "anything else",
                     "match": "[^\\\\'\n]+?",
                     "captures": {"0": {"name": "string.quoted.double.pine"}}
                  }
               ]
            }
         ]
      },
      "colors": {
         "patterns": [
            {
               "comment": "Hex color codes",
               "match": "\\b#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b",
               "captures": {"0": {"name": "constant.numeric.hex.pine"}}
            },
            {
               "comment": "Predefined color constants",
               "match": "\\bcolor\\.(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)\\b",
               "captures": {
                  "0": {"name": "constant.color.pine"},
                  "1": {"name": "color.$1.pine"}
               }
            }
         ]
      },
      "constants": {
         "patterns": [
            {
               "match": "\\bcolor\\.(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|orange|aqua)\\b",
               "captures": {"0": {"name": "color.$1.pine"}}
            },
            {
               "comment": "special type highlighting regex",
               "match": "\\b(simple|literal|series|const|plot)\\b\\s+(?=[^\\(\\.])",
               "name": "keyword.other.unit.pine"
            },
            {
               "comment": "highlights variables with all caps",
               "match": "(?<!\\.|\/\/.*)\\b([A-Z_][A-Z0-9_]*)\\b(?=\\s*[^\\(\\.])",
               "name": "variable.other.constant.pine"
            },
            {
               "comment": "highlights 'this' and 'self'",
               "match": "\\b(this|self)\\b(?=\\.\\w+\\b|\\s*(?!\\(\\w))",
               "captures": {"1": {"name": "entity.name.tag.pine"}}
            },
            {
               "match": "\\b(true|false|na)\\b",
               "name": "constant.language.pine"
            },
            {
               "match": "(?<!\/\/.*)\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()",
               "name": "constant.other.pine"
            },
            {
               "comment": "built in constants, ie: location.abovebar.pine",
               "match": "\\b(color|line|label|box|table|linefill|chart\\.point|polyline|adjustment|alert|array|bar_index|barmerge|barstate|box|chart|close|currency|dayofmonth|dayofweek|display|dividends|earnings|extend|font|format|high|hl2|hlc3|hlcc4|hline|hour|input|label|last_bar_index|last_bar_time|line|linefill|location|log|low|map|math|matrix|minute|month|na|ohlc4|open|order|plot|polyline|position|request|runtime|scale|second|session|shape|size|splits|str|strategy|syminfo|ta|table|text|ticker|time|time_close|time_tradingday|timeframe|timenow|volume|weekofyear|xloc|year|yloc)\\.([a-z][a-z0-9_]*)\\b(?![\\(\\.])",
               "captures": {
                  "1": {"name": "support.constant.namespace.pine"},
                  "0": {"name": "support.other.variable.pine"}
               }
            },
            {
               "comment": "private, ie: _mything.whatever.pine",
               "match": "\\b(?:(_[_A-z][A-z0-9_]*)\\.)+([a-zA-Z_][A-z0-9_]*)\\b(?=[^\\(\\.])",
               "captures": {
                  "0": {"name": "support.class.private.pine"},
                  "1": {"name": "entity.name.section.pine"},
                  "2": {"name": "entity.other.attribute-name.class.pine"}
               }
            }
         ]
      },
      "functions": {
         "patterns": [
            {
               "comment": "",
               "match": "\\b(alert|alertcondition|barcolor|bgcolor|bool|line|label|table|box|linefill|color|dayofmonth|dayofweek|fill|fixnan|float|hline|hour|input|int|max_bars_back|minute|month|na|nz|plot|plotarrow|plotbar|plotcandle|plotchar|plotshape|second|string|time|time_close|timestamp|weekofyear|year)(?=\\()",
               "name": "entity.name.function.pine"
            },
            {
               "match": "\\b(log)\\s*\\.\\s*(?:(info)|(error)|(warning))\\s*(?=\\()",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "token.debug-token.pine"},
                  "2": {"name": "token.info-token.pine"},
                  "3": {"name": "token.error-token.pine"},
                  "4": {"name": "token.warn-token.pine"}
               }
            },
            {
               "comment": "Function calls",
               "match": "\\b(chart\\.point|runtime|log|ticker|timeframe|syminfo|color|math|timeframe|request|ticker|str|ta|box|line|linefill|label|table|table|array|matrix)\\.([a-zA-Z_][A-z0-9_]*)\\b(?=\\s*\\()",
               "captures": {
                  "0": {"name": "entity.name.function.pine"},
                  "1": {"name": "entity.name.function.pine"},
                  "2": {"name": "entity.name.function.pine"}
               }
            },
            {
               "comment": "Function calls",
               "match": "\\b(?!chart.point|runtime|log|ticker|timeframe|syminfo|color|math|timeframe|request|ticker|str|ta|box|line|linefill|label|table|table|array|matrix)(?<!\\\/\\\/.*)(?:([a-za-zA-Z_][a-zA-Z0-9_]*(?:\\.))?([a-za-zA-Z_][a-zA-Z0-9_]*(?:\\.))*)?([a-za-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\([^\\\\)]*\\)(?=(?!\\s*=>)))",
               "captures": {
                  "0": {"name": "annotation.function.pine"},
                  "1": {"name": "entity.other.attribute-name.class.pine"},
                  "2": {"name": "entity.other.inherited-class.pine"},
                  "3": {"name": "entity.name.function.pine userDefined.type.pine"}
               }
            },
            {
               "comment": "user function regex",
               "match": "(?<!\/\/.*)\\b([_A-z][_A-z0-9]*)\\s*(\\()|\\b([_A-z][_A-z0-9]*)\\s*(?=\\([^\\)]*\\))\\s*=>",
               "captures": {
                  "1": {"name": "annotation.function.pine"},
                  "2": {"name": "brackets.pine"},
                  "3": {"name": "entity.name.function.support.pine"},
                  "4": {"name": "brackets.pine"}
               }
            }
         ]
      },
      "operators": {
         "patterns": [
            {
               "match": "(\\+=|-=|\\*=|/=|%=|:=)",
               "name": "keyword.operator.assignment.pine"
            },
            {
               "match": "\\B(==|!=|<=|>=|<|>)\\B",
               "name": "keyword.operator.comparison.pine"
            },
            {
               "match": "(?<![-:!=><\\+*%\/])=(?=[^>=])",
               "name": "keyword.other.operator.pine"
            },
            {
               "match": "(\\+|\\-|\\*|/|%)",
               "name": "keyword.operator.arithmetic.pine"
            },
            {
               "match": "(\\?|\\:)",
               "name": "keyword.operator.ternary.pine"
            },
            {
               "match": "(\\(|\\))",
               "name": "punctuation.definition.inserted.pine"
            },
            {
               "match": "(\\[|\\]|\\{|\\})",
               "name": "meta.object-literal.key.pine"
            },
            {
               "match": "\\b(→|continue|break)\\b",
               "name": "keyword.operator.return.pine"
            }
         ]
      },
      "numbers": {
         "patterns": [
            {
               "match": "\\b([+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?\\b)",
               "captures": {"0": {"name": "constant.numeric.pine"}}
            }
         ]
      },
      "variables": {
         "patterns": [
            {
               "comment": "",
               "match": "\\b(bar_index|last_bar_index|last_bar_time|time|timenow|time_tradingday|time_close|close|high|hl2|hlc3|hlcc4|low|ohlc4|open|volume|abovebar|belowbar)\\b(?=(?![\\w\\(]|[\\-+\/%*:]=))",
               "name": "variable.language.pine"
            },
            {
               "comment": "",
               "match": "\\b(dayofmonth|dayofweek|second|hour|minute|month|weekofyear|year)\\b(?=:?)(?!\\s*(?:=|:=))",
               "name": "variable.pine"
            },
            {
               "match": "\\b(line|label|box|table|linefill|polyline)(?:\\s*\\.\\s*)(all)\\b",
               "name": "variable.pine"
            },
            {
               "match": "\\b(currency)(?:\\s*\\.\\s*)([A-Z]+)\\b",
               "captures": {
                  "1": {"name": "constant.language.pine"},
                  "2": {"name": "constant.language.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(ta)(\\s*\\.\\s*)(wad|tr|vwap|obv|accdist|iii|nvi|pvi|pvt|wvad)",
               "captures": {
                  "1": {"name": "variable.pine"},
                  "2": {"name": "punctuation.pine"},
                  "3": {"name": "variable.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\s*\\.\\s*(max_runup|account_currency|cash|equity|eventrades|fixed|grossloss|grossprofit|initial_capital|long|losstrades|max_contracts_held_all|max_contracts_held_long|max_contracts_held_short|max_drawdown|netprofit|openprofit|percent_of_equity|position_avg_price|position_entry_name|position_size|short|wintrades)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.constant.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\s*\\.\\s*(commission)\\s*\\.\\s*(cash_per_contract|cash_per_order|percent)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.constant.pine"},
                  "3": {"name": "support.constant.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\s*\\.\\s*(direction)\\s*\\.\\s*(all|long|short)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.constant.pine"},
                  "3": {"name": "support.constant.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\s*\\.\\s*(oca)\\s*\\.\\s*(cancel|none|reduce)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.constant.pine"},
                  "3": {"name": "support.constant.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\.((?:opentrades|closedtrades)(?=[^\\.])|(?:margin_liquidation_price|grossloss_percent|max_runup_percent|netprofit_percent|openprofit_percent|grossprofit_percent|max_drawdown_percent))\\b(?!\\s*\\()",
               "captures": {
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.function.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(strategy)\\.(?:([a-zA-Z_]+)\\.)?([a-zA-Z_]+)(?=\\s*\\()\\b",
               "captures": {
                  "1": {"name": "support.constant.pine"},
                  "2": {"name": "support.constant.pine"},
                  "3": {"name": "support.function.builtin.pine"}
               }
            },
            {
               "comment": "",
               "match": "(?=(?:^|var\\s+|varip\\s+|\\(|,)\\s*).*\\b((simple|series|input|const|literal)\\s+)(?:([a-zA-Z_]\\w*\\.)?([a-zA-Z_]\\w*))\\s*(?=(?:[a-zA-Z_]\\w*)\\s*(=|,|\\)))",
               "captures": {
                  "1": {"name": "keyword.operator.type.pine"},
                  "2": {"name": "keyword.operator.type.pine"},
                  "3": {"name": "keyword.operator.type.pine"}
               }
            },
            {
               "comment": "",
               "match": "\\b(dayofmonth|dayofweek|second|hour|minute|month|weekofyear|year)(?!\\s*(?:=|:=))\\b",
               "name": "variable.pine"
            },
            {
               "comment": "",
               "match": "\\b(math)\\s*\\.\\s*(e|phi|pi|rphi)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "variable.pine"},
                  "2": {"name": "variable.pine"}
               }
            },
            {
               "match": "(?<=\\))\\.([a-zA-Z_][A-z0-9_]*)\\b(?=\\.\\w|\\s*[^\\(])",
               "captures": {"1": {"name": "entity.other.attribute-name"}}
            },
            {
               "comment": "",
               "match": "\\b(line|label|box|table|linefill|polyline)\\s*\\.\\s*(all)\\b",
               "captures": {
                  "0": {"name": "punctuation.separator.pine"},
                  "1": {"name": "constant.other.pine"},
                  "2": {"name": "constant.other.pine"}
               }
            },
            {
               "comment": "namespace regex",
               "match": "(?<!<|\/\/.*|\\.)(?:\\b(?=(?!adjustment|alert|array|bar_index|barmerge|barstate|box|chart|close|color|currency|dayofmonth|dayofweek|display|dividends|earnings|extend|font|format|high|hl2|hlc3|hlcc4|hline|hour|input|label|last_bar_index|last_bar_time|line|linefill|location|log|low|map|math|matrix|minute|month|na|ohlc4|open|order|plot|polyline|position|request|runtime|scale|second|session|shape|size|splits|str|strategy|syminfo|ta|table|text|ticker|time|time_close|time_tradingday|timeframe|timenow|volume|weekofyear|xloc|year|yloc))([a-zA-Z_]\\w*\\.(\\w+\\.)*)(?:(\\w+\\b(?=\\s*[^\\\\(\\\\.])(?!\\s+\\w))))",
               "captures": {
                  "1": {"name": "userDefined.type.pine | storage.type.pine"},
                  "2": {"name": "entity.other.attribute-name.pine"},
                  "3": {"name": "entity.other.inherited-class"}
               }
            },
            {
               "comment": "any varname.fieldname.etc.pine",
               "match": "(?<!<)\\b([a-zA-Z_]\\w*)\\.([a-zA-Z_]\\w*)\\b",
               "captures": {
                  "1": {"name": "userDefined.type.pine | storage.type.pine"},
                  "2": {"name": "entity.other.attribute-name.pine"}
               }
            },
            {
               "match": "\\b([a-zA-Z_][A-z0-9_]*)\\b(?!\\s*\\()",
               "captures": {"1": {"name": "entity.name.pine"}}
            }
         ]
      }
   },
   "scopeName": "source.pine"
}
